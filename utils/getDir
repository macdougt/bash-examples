#!/usr/bin/env perl

# Accept three types of input that perform
# three different actions
# word or regex -> first look for a matching tag if they exist
#                  next look through the directory history for a match
#                  on the lowest directory
# negative number -m -> go up the directory tree by m steps or to the root
#                       if m is greater than the number of directories
#                       in the current path
#
# positive number n -> go to the directory history's nth entry
#
use IO::Prompt;

# Assume multiple arguments means the string includes spaces
# Have to consume all arguments
my $cdInput = shift;
while (@ARGV) {
  $cdInput .= " ".shift();
}

# The file that stores the directory history
my $dirHistoryFile = $ENV{"HOME"}."/.dirhistory";

# First check if this is a regular directory
if (-d $cdInput) {
   print $cdInput;
   exit(0);
} elsif (-f $cdInput) {
   use File::Basename;
   print dirname($cdInput); 
   exit(0);
}

# This case assumes that the user is looking to match a directory
# or wants the nth directory in the directory history
# Both open and iterate through the history file
if ($cdInput !~ /^\s*-?\d+\s*$/) {  # not a number
   if (! &printMatchingTag($cdInput)) {  #first check for tag match
      open DH, "<$dirHistoryFile" || die "Cannot open $dirHistoryFile: $!";
      &printMatchingLines(\*DH, $cdInput);
      close DH;
   }
} elsif ($cdInput > 0) {
   open DH, "<$dirHistoryFile" || die "Cannot open $dirHistoryFile: $!";
   print &getNthLine(\*DH, $cdInput);
   close DH;
} elsif ($cdInput < 0) {
   # Move up the directory tree by cdInput steps or to the root
   my $dirJump = -$cdInput;
   print &getHigherDir($dirJump);
} elsif ($cdInput == 0) {
   print STDERR "0 does not move you...\n";
}

# Check the directory tag file for a match
sub printMatchingTag {
   my $matchString = shift;
   my $retVal;
   my $dirTagsFile = $ENV{"HOME"}."/.dirtags";

   if (-f $dirTagsFile) {
      open DT, "<$dirTagsFile" || die "Cannot open $dirTagsFile: $!";
      while (<DT>) {
         if (/^(\w+):(.*)/) {   # format <tag>:<directory>
            my $tag = $1;
            my $dir = $2;
            if ($matchString eq $tag) {
               print $dir;
               $retVal = 1;
            }
         }
      }
      close DT;
   }
   return $retVal;
}

# Return the directory n steps above the currect directory
sub getHigherDir {
   my $dirJump = shift;
   # Move up the directory tree by cdInput steps or to the root
   use Cwd;
   my $cwd = getcwd();
   # Remove the trailing directories
   my @curDirs = split("/", $cwd);
   if ($#curDirs > $dirJump) {
      return join("/", @curDirs[0..($#curDirs-$dirJump)]);
   } else {
      return "/";
   }
}

# Print lines matching the match string from the file
# with file handle fh
sub printMatchingLines {
   my $fh = shift;
   my $matchString = shift;
   # List matches
   my @matches;
   while(my $dir = <$fh>) {
        chomp($dir);
        if ($dir =~ /.*\/(.*)$/) {
           my $lastDir = $1;
           if ($lastDir =~ /$matchString/) {
              push(@matches, $dir);
           }
        }
   }
   print prompt_user("Make your choice",\@matches,"");(\@matches);
}

# Prompt user for input on list choice
# Provide shortcuts (i.e. letters or single digits)
sub prompt_user {

  my $prompt_string = shift;
  my $ra_list = shift;
  my $match = shift;
  my $callback = shift;
  if (! defined($callback)) {
      $callback = sub { return; };
  }

  my @new_list;

  print STDERR "$prompt_string\n";

  # Display list
  my $list_length = $#{$ra_list};
  my $excess;
  if ( $list_length > 0 ) {
    print STDERR "List:\n";
    if (length($match)) {
      # Reset the list to the matching list
      for ( my $i = 0 ; $i <= $list_length ; $i++ ) {
        if ( $$ra_list[$i] =~ /$match/) {
          push(@new_list, $$ra_list[$i]);
        }
      }
      $ra_list = \@new_list;
      $list_length = $#{$ra_list};
      $excess = $list_length - 26;
    }

    for ( my $i = 0 ; $i <= $list_length ; $i++ ) {
      printf STDERR "%-3s", ($i + 1);
      # In the last 26?
      $excess = $list_length - 26;
      if ($i > $excess) {
        print STDERR "[".chr(96+$i-$excess)."]\t$$ra_list[$i]\n";
      } else {
        print STDERR ")\t$$ra_list[$i]\n";
      }
    }
  }

  # Is there only one result, return it
  if ( $list_length == 0 ) {
    print STDERR "Matched one: $$ra_list[0]\n";
    return $$ra_list[0];
  } elsif ($list_length < 0) {
    # List is empty, suggest using mdfind
    print STDERR "Maybe use:\n\tmdfind -name $cdInput | grep $cdInput\$\n\tmdfind -name $cdInput\n";
    print STDERR "Or:\n\tlocate $cdInput | grep $cdInput\$\n\tlocate $cdInput";
    exit()  
  }

  # More than one result
  my $done = 0;
  my $choice = "";
  while (! $done) {
    my $key = prompt '', -1;
    $choice .= $key;
    if ($key =~ /\d/) {
      if ($list_length < 10) {
        my $ret_val = $$ra_list[$key-1];
        &$callback($ret_val);
        return $ret_val;
      }
    } elsif ($key =~/[a-z]/) {
      my $ret_val = $$ra_list[ord($key)-96+$excess];
      &$callback($ret_val);
      return $ret_val;
    } else {
      # catch the return
      $done = 1;
      my $ret_val = $$ra_list[$choice-1];
      &$callback($ret_val);
      return $ret_val;
    }
  }
}

# Return the nth line from file with file handle fh
sub getNthLine {
   my $fh = shift;
   my $n = shift;
   my $dir;

   # Skip to the specified line and return its contents
   while($dir = <$fh>) {
      if ($. == $n) {
         chomp($dir);
         last;
      }
   }
   return $dir;
}
